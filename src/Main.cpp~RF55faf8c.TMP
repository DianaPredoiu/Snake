#include <conio.h>
#include <iostream>
#include "GameMap.h"

#define KEY_UP 72
#define KEY_DOWN 80
#define KEY_LEFT 75
#define KEY_RIGHT 77

int main()
{

	GameMap game(10,10);
	game.initializeGrid();
	std::cout << game;

	int c = 0;
	while (1)
	{

		c = _getch();
		switch (c = _getch()) {
		case KEY_UP:
			//std::cout << "Up" << std::endl;//key up
			//----mai trebuie adaugate conditii----
			if (game.getSnake().getSnakePosition().at(0)->getY() != 0)
			{
				//tail
				game.getSnake().getSnakePosition().at(game.getSnake().getSnakePosition().size() - 1)->setY(game.getSnake().getSnakePosition().at(game.getSnake().getSnakePosition().size() - 2)->getY());
				game.getSnake().getSnakePosition().at(game.getSnake().getSnakePosition().size() - 1)->setX(game.getSnake().getSnakePosition().at(game.getSnake().getSnakePosition().size() - 2)->getX());

				//body
				for (int i = game.getSnake().getSnakePosition().size() - 1; i >0; i--)
				{
					game.getSnake().getSnakePosition().at(i)->setX(game.getSnake().getSnakePosition().at(i - 1)->getX());
					game.getSnake().getSnakePosition().at(i)->setY(game.getSnake().getSnakePosition().at(i - 1)->getY());
				}

				//head
				game.getSnake().getSnakePosition().at(0)->setY(game.getSnake().getSnakePosition().at(0)->getY() - 1);

				

				system("cls");
				game.initializeGrid();
				std::cout << game;
				if (game.getSnake().getSnakePosition().at(0)->getY() == 0)
					std::cout << std::endl<< "GAME OVER!";
			}
			else
				std::cout << "GAME OVER!";
			break;
		case KEY_DOWN:
			//std::cout << "Down" << std::endl;   // key down
			//----mai trebuie adaugate conditii----
			if (game.getSnake().getSnakePosition().at(0)->getY() != game.getHeight()-1)
			{
				
				for (int i = game.getSnake().getSnakePosition().size() - 1; i > 0; i--)
				{
					game.getSnake().getSnakePosition().at(i)->setX(game.getSnake().getSnakePosition().at(i - 1)->getX());
					game.getSnake().getSnakePosition().at(i)->setY(game.getSnake().getSnakePosition().at(i - 1)->getY());
				}
				game.getSnake().getSnakePosition().at(0)->setY(game.getSnake().getSnakePosition().at(0)->getY() + 1);

				system("cls");
				game.initializeGrid();
				std::cout << game;
				if (game.getSnake().getSnakePosition().at(0)->getY() == game.getHeight()-1)
					std::cout << std::endl << "GAME OVER!";
			}
			else
				std::cout << "GAME OVER!";
			break;
		case KEY_LEFT:
			//std::cout << "Left" << std::endl;  // key left
			//----mai trebuie adaugate conditii----
			if (game.getSnake().getSnakePosition().at(0)->getX() != 0)
			{

				for (int i = game.getSnake().getSnakePosition().size() - 1; i > 0; i--)
				{
					game.getSnake().getSnakePosition().at(i)->setX(game.getSnake().getSnakePosition().at(i - 1)->getX());
					game.getSnake().getSnakePosition().at(i)->setY(game.getSnake().getSnakePosition().at(i - 1)->getY());
				}
				game.getSnake().getSnakePosition().at(0)->setX(game.getSnake().getSnakePosition().at(0)->getX() - 1);

				system("cls");
				game.initializeGrid();
				std::cout << game;
				if (game.getSnake().getSnakePosition().at(0)->getX() == 0)
					std::cout << std::endl << "GAME OVER!";
			}
			else
				std::cout << "GAME OVER!";
			break;
		case KEY_RIGHT:
			//std::cout << "Right" << std::endl;  // key right
			//----mai trebuie adaugate conditii----
			//gen daca head-ul e in stanga nu ar trebui sa faca dreapta dar face :))
			if (game.getSnake().getSnakePosition().at(0)->getX() != game.getWidth()-1)
			{

				for (int i = game.getSnake().getSnakePosition().size() - 1; i > 0; i--)
				{
					game.getSnake().getSnakePosition().at(i)->setX(game.getSnake().getSnakePosition().at(i - 1)->getX());
					game.getSnake().getSnakePosition().at(i)->setY(game.getSnake().getSnakePosition().at(i - 1)->getY());
				}
				game.getSnake().getSnakePosition().at(0)->setX(game.getSnake().getSnakePosition().at(0)->getX() + 1);

				system("cls");
				game.initializeGrid();
				std::cout << game;
				if (game.getSnake().getSnakePosition().at(0)->getX() == game.getWidth() - 1)
					std::cout << std::endl << "GAME OVER!";
			}
			else
				std::cout << "GAME OVER!";
			break;
		default:
			std::cout << "null" << std::endl;  // not arrow
			break;
		}

	}

	return 0;
}